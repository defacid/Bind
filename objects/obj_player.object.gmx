<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_wall</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>RIGHT = 0;
UP = 1;
LEFT = 2;
DOWN = 3;

//Stats
maxHp = 100;
hp = maxHp;

//Movement
dir = DOWN;
speed = 0;
friction = 0.2;
maxSpeed = 1.5;

//Actions
canMove = false;
strafe = false;
roll = false;
rollSpeed = room_speed/2;

//Combat
attack = false;
canAttack = true;
combo = 0;
maxCombo = 3;
attackSpeed = room_speed/4;

//Armor
for(i=0; i &lt;= 4; i++) armorGlow[i] = 0;

hasHelm = false;
hasCuirass = false;
hasGauntlets = false;
hasGreaves = false;
hasShield = false; //image_single = 1 for player when shield is up 

//Debug
showDebug = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>combo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canMove = true;
canAttack = true;
attack = false;
alarm[2] = room_speed/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canMove = true;
roll = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Armor Bonuses
var attackBonus = 0, speedBonus = 0, hpBonus = 0;
if (hasHelm) {
    hpBonus += 1;
}

if (hasCuirass) {
    hpBonus += 1;
}

if (hasGauntlets) {
    attackBonus += room_speed/8;
    hpBonus += 1;
}

if (hasGreaves) {
    speedBonus += 0.5;
    hpBonus += 1;
}

if (hasShield) {
    hpBonus += 1;
}

if (maxHp &lt; 100 + 25*hpBonus) maxHp = 100 + 25*hpBonus;


//Strafe

if (keyboard_check(ord('C'))) {
    strafe = true;
    speedBonus -= 0.5;
}
else strafe = false;


//Movement and Actions
if (canMove) {
    if (keyboard_check(vk_right)) {
        if (!strafe) {
            sprite_index = spr_player_right;
            dir = RIGHT;
        }
        
        hspeed += 0.25;
    }
    
    if (keyboard_check(vk_left)) {
        if (!strafe) {
            sprite_index = spr_player_right;
            dir = LEFT;
        }
        
        hspeed -= 0.25;
    }
    
    if (keyboard_check(vk_up)) {
        if (!strafe) {
            sprite_index = spr_player_up;
            dir = UP;
        }
        
        vspeed -= 0.25;
    }
    
    if (keyboard_check(vk_down)) {
        if (!strafe) {
            sprite_index = spr_player_down;
            dir = DOWN;
        }
        
        vspeed += 0.25;
    }
    
    if (keyboard_check_pressed(ord('Z')) &amp;&amp; canAttack &amp;&amp; combo &lt; maxCombo) {
        canMove = false;
        canAttack = false;
        attack = true;
        image_single = 1;
        combo += 1;
        
        var angle, swing, swingDir;
        
        if (combo &lt; maxCombo) {
            swingDir = (1 - 2*(combo % 2));
            angle = swingDir * 90;
            swing = -swingDir * 10;
            speed = (maxSpeed + speedBonus)*1.25;
            alarm[1] = attackSpeed - attackBonus;
        }
        else {
            angle = 0;
            swing = 0;
            speed = (maxSpeed + speedBonus)*2;
            alarm[1] = (attackSpeed - attackBonus);
        }
        
        var s = instance_create(x, y + 1, obj_sword);
        if (strafe) {
            if (direction &gt; 45 &amp;&amp; direction &lt; 135 || direction &gt; 225 &amp;&amp; direction &lt; 315) {
                s.vspeed = vspeed;
            }
            else s.hspeed = hspeed;
            s.direction = dir * 90;
        }
        else {
            s.direction = direction;
            s.speed = speed;
        }
        s.x += lengthdir_x(2, s.direction);
        s.y += lengthdir_y(2, s.direction);
        s.speed += 0.5;
        s.angle = angle;
        s.swing = swing;
    }
    
    if (keyboard_check_pressed(ord('X')) &amp;&amp; !attack) {
        canMove = false;
        roll = true;
        speed = (maxSpeed + speedBonus + 0.5*strafe)*3;
        switch(dir) {
            case 0:
            case 2:
                sprite_index = spr_player_right_roll;
            break;
            case 1:
                sprite_index = spr_player_up_roll;
            break;
            case 3:
                sprite_index = spr_player_down_roll;
            break;
        }
        image_index = 0;   
        alarm[0] = rollSpeed;
    }
    
    if (keyboard_check(ord('X')) &amp;&amp; !roll &amp;&amp; !attack) {
        speedBonus += 0.75;
        canAttack = 0;
    }
    
    if (keyboard_check_released(ord('X')) &amp;&amp; !roll &amp;&amp; !attack) {
        canAttack = 1;
    }
    
    if (keyboard_check(vk_anykey) &amp;&amp; speed &gt; maxSpeed + speedBonus &amp;&amp; !roll &amp;&amp; !attack) speed = maxSpeed + speedBonus;

}

if (roll) image_speed = 8/rollSpeed;
else if (!attack){
    switch(dir) {
        case 0:
        case 2:
            sprite_index = spr_player_right;
        break;
        case 1:
            sprite_index = spr_player_up;
        break;
        case 3:
            sprite_index = spr_player_down;
        break;
    }
    
    image_speed = .1 * speed;
    if (abs(speed) &lt; 0.2) {
        image_single = 0;
        direction = 90 * dir;
    }
}

if (place_meeting(x + hspeed, y, obj_wall)) {
    hspeed = -hspeed;
}
if (place_meeting(x, y + vspeed, obj_wall)) {
    vspeed = -vspeed;
}

//DEBUG
if (keyboard_check_pressed(ord('R'))) game_restart();

if (keyboard_check_pressed(vk_tab)) showDebug = !showDebug;
if (keyboard_check_pressed(ord('1'))) hasHelm = !hasHelm;
if (keyboard_check_pressed(ord('2'))) hasCuirass = !hasCuirass;
if (keyboard_check_pressed(ord('3'))) hasGauntlets = !hasGauntlets;
if (keyboard_check_pressed(ord('4'))) hasGreaves = !hasGreaves;
if (keyboard_check_pressed(ord('5'))) hasShield = !hasShield;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;

var flip;
if (dir == LEFT) flip = -1;
else flip = 1;

draw_set_blend_mode(bm_subtract);
draw_ellipse_color(x - 9, y + 5, x + 8, y + 9, c_dkgray, c_black, 0);
draw_set_blend_mode(bm_normal);

draw_sprite_ext(sprite_index, image_index, x, y, image_xscale * flip, image_yscale, image_angle, image_blend, image_alpha);

for(i=0; i &lt; 5; i++) {
    if (armorGlow[i] &gt; 0) armorGlow[i] -= 0.0125;
}

if (hasCuirass) {
    var cuirassIndex;
    switch(sprite_index) {
        case spr_player_right:
            cuirassIndex = spr_cuirass_right;
        break;
        case spr_player_right_roll:
            cuirassIndex = spr_cuirass_right_roll;
        break;
        case spr_player_up:
            cuirassIndex = spr_cuirass_up;
        break;
        case spr_player_up_roll:
            cuirassIndex = spr_cuirass_up_roll;
        break;
        case spr_player_down:
            cuirassIndex = spr_cuirass_down;
        break;
        case spr_player_down_roll:
            cuirassIndex = spr_cuirass_down_roll;
        break;
    }
    
    if (armorGlow[1] &gt; 0) {
        var col;
        col = make_color_rgb(255*armorGlow[1], 255*armorGlow[1], 255*armorGlow[1]);
        
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(cuirassIndex, image_index, x, y, image_xscale * flip, image_yscale, image_angle, col, armorGlow[1]);
        draw_set_blend_mode(bm_normal);
    }
    
    draw_sprite_ext(cuirassIndex, image_index, x, y, image_xscale * flip, image_yscale, image_angle, image_blend, image_alpha);
}

if (hasGreaves) {
    var greavesIndex;
    switch(sprite_index) {
        case spr_player_right:
            greavesIndex = spr_greaves_right;
        break;
        case spr_player_right_roll:
            greavesIndex = spr_greaves_right_roll;
        break;
        case spr_player_up:
            greavesIndex = spr_greaves_up;
        break;
        case spr_player_up_roll:
            greavesIndex = spr_greaves_up_roll;
        break;
        case spr_player_down:
            greavesIndex = spr_greaves_down;
        break;
        case spr_player_down_roll:
            greavesIndex = spr_greaves_down_roll;
        break;
    }
    
    if (armorGlow[3] &gt; 0) {
        var col;
        col = make_color_rgb(255*armorGlow[3], 255*armorGlow[3], 255*armorGlow[3]);
        
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(greavesIndex, image_index, x, y, image_xscale * flip, image_yscale, image_angle, col, armorGlow[3]);
        draw_set_blend_mode(bm_normal);
    }
    
    draw_sprite_ext(greavesIndex, image_index, x, y, image_xscale * flip, image_yscale, image_angle, image_blend, image_alpha);
}

if (hasGauntlets) {
    var gauntletsIndex;
    switch(sprite_index) {
        case spr_player_right:
            gauntletsIndex = spr_gauntlets_right;
        break;
        case spr_player_right_roll:
            gauntletsIndex = spr_gauntlets_right_roll;
        break;
        case spr_player_up:
            gauntletsIndex = spr_gauntlets_up;
        break;
        case spr_player_up_roll:
            gauntletsIndex = spr_gauntlets_up_roll;
        break;
        case spr_player_down:
            gauntletsIndex = spr_gauntlets_down;
        break;
        case spr_player_down_roll:
            gauntletsIndex = spr_gauntlets_down_roll;
        break;
    }
    
    if (armorGlow[2] &gt; 0) {
        var col;
        col = make_color_rgb(255*armorGlow[2], 255*armorGlow[2], 255*armorGlow[2]);
        
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(gauntletsIndex, image_index, x, y, image_xscale * flip, image_yscale, image_angle, col, armorGlow[2]);
        draw_set_blend_mode(bm_normal);
    }
    
    draw_sprite_ext(gauntletsIndex, image_index, x, y, image_xscale * flip, image_yscale, image_angle, image_blend, image_alpha);
}

if (hasHelm) {
    var helmIndex;
    switch(sprite_index) {
        case spr_player_right:
            helmIndex = spr_helm_right;
        break;
        case spr_player_right_roll:
            helmIndex = spr_helm_right_roll;
        break;
        case spr_player_up:
            helmIndex = spr_helm_up;
        break;
        case spr_player_up_roll:
            helmIndex = spr_helm_up_roll;
        break;
        case spr_player_down:
            helmIndex = spr_helm_down;
        break;
        case spr_player_down_roll:
            helmIndex = spr_helm_down_roll;
        break;
    }
    
    if (armorGlow[0] &gt; 0) {
        var col;
        col = make_color_rgb(255*armorGlow[0], 255*armorGlow[0], 255*armorGlow[0]);
        
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(helmIndex, image_index, x, y, image_xscale * flip, image_yscale, image_angle, col, armorGlow[0]);
        draw_set_blend_mode(bm_normal);
    }
        
    draw_sprite_ext(helmIndex, image_index, x, y, image_xscale * flip, image_yscale, image_angle, image_blend, image_alpha);
}

if (hasShield &amp;&amp; strafe) {
    draw_set_blend_mode(bm_add);
    draw_circle_color(x, y, 12, c_black, c_dkgray, 0);
    draw_set_blend_mode(bm_normal);
}


if (armorGlow[4] &gt; 0) {
    var col;
    col = make_color_rgb(64*armorGlow[4], 64*armorGlow[4], 64*armorGlow[4]);
    draw_set_blend_mode(bm_add);
    draw_circle_color(x, y, 12, c_black, col, 0);
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
