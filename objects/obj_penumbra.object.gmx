<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = 10;

dir = point_direction(x, y, obj_player.x, obj_player.y);
dis = point_distance(x, y, obj_player.x, obj_player.y);

canAttack = 1;
attack = 0;
canHurt = 1;
dead = 0;
alpha = 0;

maxSpeed = 0.25;
friction = .1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canAttack = 1;
attack = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canHurt = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y + 4;

if (!dead) {
    if (alpha &lt; 1) alpha += 0.01;
    else {
        dir = point_direction(x, y, obj_player.x, obj_player.y);
        dis = point_distance(x, y, obj_player.x, obj_player.y);
        
        if (speed &lt; maxSpeed || attack &amp;&amp; speed &lt; 2) {
            if (dis &gt; 4) motion_add(dir, 0.15);
        }
        
        var comrade;
        x += 1000;
        comrade = instance_nearest(x, y, obj_penumbra);
        x -= 1000;
        
        if (comrade.id != id &amp;&amp; point_distance(x, y, comrade.x, comrade.y) &lt; 8) motion_add(0.1, point_direction(x, y, comrade.x, comrade.y) + 180);
        
        var rand;
        rand = random(1);
        if (rand &gt; 1 - 1/room_speed &amp;&amp; canAttack &amp;&amp; dis &gt; 32) {
            canAttack = 0;
            attack = 1;
            alarm[1] = room_speed/2;
        }
        
        if (instance_exists(obj_sword)) {
            var sword = instance_nearest(x, y, obj_sword);
            
            if (point_distance(x, y, sword.x, sword.y) &lt; 14 &amp;&amp; canHurt) {
                canHurt = 0;
                hp -= 10;
                
                if (hp &gt; 0) {
                    alarm[0] = room_speed/4;
                }
                else {
                    instance_create(x, y, obj_soul);
                    dead = 1;
                }
            }
        }
    }
}
else {
    speed = 0;
    alpha -= 0.0125;
    
    if (alpha &lt;= 0) instance_destroy();
}

draw_set_blend_mode(bm_subtract);
var shade;
shade = make_color_rgb(128*alpha, 128*alpha, 128*alpha);

for(i=0; i &lt; 6; i++) {
    if (!dead) draw_circle_color(x + lengthdir_x(i/2, dir) - hspeed*i/2, y - 2*i*alpha + lengthdir_y(i/2, dir) - vspeed*i/2, 6 - i/2, shade, c_black, 0);
    else draw_circle_color(x + lengthdir_x(i/2, dir) + lengthdir_x(2*(1-alpha), random(360)), y - 2*i*alpha + lengthdir_y(i/2, dir) + lengthdir_y(2*(1-alpha), random(360)), 6 - i/2, shade, c_black, 0);
}

draw_ellipse_color(x - 7 - 5*(1-alpha), y - 2 - 3*(1-alpha), x + 7 + 5*(1-alpha), y + 6 + 3*(1-alpha), shade, c_black, 0);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
